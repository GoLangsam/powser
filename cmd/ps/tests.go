// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test concurrency primitives: power series.

package main

import (
	"fmt"

	"github.com/GoLangsam/powser"
)

// ===========================================================================

// TODO: => series.go
func sin2cos2() ps.PS {
	S1, C1 := ps.Sincos()
	S2, C2 := ps.Sincos()
	return S1.Times(S2).Plus(C1.Times(C2))
}

type test struct {
	t string // title
	f ps.PS  // generating function
	N int    // how many to print
	r string // expected result
}

func doTests() {
	testS := tests()
	if n < 1 {
		for n, t := range testS {
			doTest(n, t)
		}
	} else if n < len(testS) {
		doTest(n, testS[n+1])
	} else {
		panic("n is too large - there are not so many tests" )
	}
}

func doTest(n int, a test) {
	fmt.Print("#", n, a.t)
	a.f.Printn(a.N)
}

func tests() []test {
	return []test{
		{t: " Ones = 1 / (1-x): ", N: 20, f: ps.Ones(),
			r: "1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1"},
		{t: " Harmonics       : ", N: 13, f: ps.Harmonics(),
			r: "1/1 3/2 11/6 25/12 137/60 49/20 363/140 761/280 7129/2520 7381/2520 83711/27720 86021/27720 1145993/360360"},
		{t: " Factorials      : ", N: 14, f: ps.Factorials(),
			r: "1/1 2/1 6/1 24/1 120/1 720/1 5040/1 40320/1 362880/1 3628800/1 39916800/1 479001600/1 6227020800/1 87178291200/1"},
		{t: " Harmonics       : ", N: 13, f: ps.Harmonics(),
			r: "1/1 3/2 11/6 25/12 137/60 49/20 363/140 761/280 7129/2520 7381/2520 83711/27720 86021/27720 1145993/360360"},
		{t: " Fibonaccis      : ", N: 13, f: ps.Fibonaccis(),
			r: "1/1 1/1 2/1 3/1 5/1 8/1 13/1 21/1 34/1 55/1 89/1 144/1 233/1"},
		{t: " 1 / Fact = e^x  : ", N: 14, f: ps.OneByFactorial(),
			r: "1/1 1/1 1/2 1/6 1/24 1/120 1/720 1/5040 1/40320 1/362880 1/3628800 1/39916800 1/479001600 1/6227020800"},
		{t: " 1 / Fact = e^x  : ", N: 18, f: ps.OneByFactorial(),
			r: "1/1 1/1 1/2 1/6 1/24 1/120 1/720 1/5040 1/40320 1/362880 1/3628800 1/39916800 1/479001600 1/6227020800 1/87178291200 1/1307674368000 1/20922789888000 1/355687428096000"},

		{t: " Sinus           : ", N: 14, f: ps.Sin(),
			r: "0/1 1/1 0/1 -1/6 0/1 1/120 0/1 -1/5040 0/1 1/362880 0/1 -1/39916800 0/1 1/6227020800"},
		{t: " Cos (-1)^i/(2i)!: ", N: 14, f: ps.Cos(),
			r: "1/1 0/1 -1/2 0/1 1/24 0/1 -1/720 0/1 1/40320 0/1 -1/3628800 0/1 1/479001600 0/1"},
		{t: " Sin^2 + Cos^2==1: ", N: 20, f: sin2cos2(),
			r: "1/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1"},

		// Plus Less
		{t: " Ones: ", N: 20, f: ps.Ones(),
			r: "1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1"},
		{t: " Twos: ", N: 20, f: ps.Twos(),
			r: "2/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1"},
		{t: " Twos: ", N: 02, f: ps.Twos(),
			r: "2/1 2/1"},
		{t: " Add : ", N: 20, f: ps.Ones().Plus(ps.Twos()),
			r: "3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1"},
		{t: " 1+  : ", N: 20, f: ps.Ones().Plus(),
			r: "1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1"},
		{t: " 1+2 : ", N: 20, f: ps.Ones().Plus(ps.Twos()),
			r: "3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1 3/1"},
		{t: " 1+8 : ", N: 20, f: ps.Ones().Plus(ps.Twos(), ps.Ones(), ps.Twos(), ps.Ones(), ps.Twos()),
			r: "9/1 9/1 9/1 9/1 9/1 9/1 9/1 9/1 9/1 9/1 9/1 9/1 9/1 9/1 9/1 9/1 9/1 9/1 9/1 9/1"},
		{t: " 1-  : ", N: 20, f: ps.Ones().Less(),
			r: "1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1"},
		{t: " 1-2 : ", N: 18, f: ps.Ones().Less(ps.Twos()),
			r: "-1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1"},
		{t: " 1-9 : ", N: 18, f: ps.Ones().Less(ps.Ones(), ps.Twos(), ps.Ones(), ps.Twos(), ps.Ones(), ps.Twos()),
			r: "-8/1 -8/1 -8/1 -8/1 -8/1 -8/1 -8/1 -8/1 -8/1 -8/1 -8/1 -8/1 -8/1 -8/1 -8/1 -8/1 -8/1 -8/1"},

		// Plus Less - with short PS

		{t: " Quad: ", N: 20, f: sqr(),
			r: "1/1 1/1 1/1"},
		{t: " Poly: ", N: 20, f: poly(),
			r: "1/1 1/2 1/3 1/4 1/5"},
		{t: " Poly: ", N: 02, f: poly(),
			r: "1/1 1/2"},
		{t: " Add : ", N: 17, f: poly().Plus(ps.Ones()),
			r: "1/1 1/2 1/3 1/4 1/5"},
		{t: " 1+  : ", N: 20, f: poly().Plus(),
			r: "1/1 1/2 1/3 1/4 1/5"},
		{t: " 1+2 : ", N: 17, f: poly().Plus(sqr()),
			r: "2/1 3/2 4/3 1/4 1/5"},
		{t: " 1+9 : ", N: 20, f: poly().Plus(one(), lin(), sqr(), one(), lin(), sqr()),
			r: "7/1 9/2 7/3 1/4 1/5"},
		{t: " 1-  : ", N: 20, f: sqr().Less(),
			r: "1/1 1/1 1/1"},
		{t: " 1-2 : ", N: 20, f: sqr().Less(lin()),
			r: "0/1 0/1 1/1"},
		{t: " 1-9 : ", N: 18, f: poly().Less(one(), lin(), sqr(), one(), lin(), sqr()),
			r: "-5/1 -7/2 -5/3 1/4 1/5"},

		// Recip: Plus Less
		{t: " 1/Ones^2        : ", N: 30, f: ps.Ones().Times(ps.Ones().Recip()),
			r: "1/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1"},
		{t: " 1/Twos^2        : ", N: 30, f: ps.Twos().Times(ps.Twos().Recip()),
			r: "1/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1"},
		{t: " 1/Factorials^2  : ", N: 30, f: ps.Factorials().Times(ps.Factorials().Recip()),
			r: "1/1 -2/1 -18/1 -192/1 -6408/1 -252720/1 -13421520/1 -929255040/1 -80712858240/1 -8566722259200/1 -1012019938272000/1 -152601116088960000/1 -28608265184917017600/1 -5425981808381803468800/1 -1329835360840370512128000/1 -347400296123032691675136000/1 -102143979579601367191719936000/1 -33494168657886356497530765312000/1 -11710690689896582137841085014016000/1 -4968424246175778513147260220702720000/1 -2212926735803566100615606380185354240000/1 -1080551801749042267040882753965915176960000/1 -576148363020407697382920494485897560391680000/1 -334234100403836531963304559383435685346672640000/1 -202559614227726208944663352731340481435672248320000/1 -142966820374958800695605689635399448352255508480000000/1 -104785057947482098144344836728854455362066262654976000000/1 -82558516981048400614865297903073721898050322365415424000000/1 -69748835628619983114344356732163008313113169005172490240000000/1 -61085864981175189906416709496721599192122051362821238685696000000/1"},
		{t: " 1/Fibonaccis^2  : ", N: 30, f: ps.Fibonaccis().Times(ps.Fibonaccis().Recip()),
			r: "1/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1"},
		{t: " 1 / Fact = e^x  : ", N: 30, f: ps.OneByFactorial().Times(ps.OneByFactorial().Recip()),
			r: "1/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1"},
		{t: " 1/ 1/Fibonacci^2: ", N: 30, f: ps.OneByFibonacci().Times(ps.OneByFibonacci().Recip()),
			r: "1/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1"},

		{t: " 1*1: ", N: 20, f: one().Times(one()),
			r: ""},
		{t: " 1+x: ", N: 20, f: one().Times(lin()),
			r: ""},
		{t: " x+1: ", N: 20, f: lin().Times(one()),
			r: ""},
		{t: " (1+x)^2: ", N: 20, f: lin().Times(lin()),
			r: ""},
		{t: " 1*3: ", N: 20, f: one().Times(sqr()),
			r: ""},
		{t: " 3*1: ", N: 20, f: sqr().Times(one()),
			r: ""},
		{t: " 2*3: ", N: 20, f: lin().Times(sqr()),
			r: ""},
		{t: " 3*2: ", N: 20, f: sqr().Times(lin()),
			r: ""},
		{t: " 3*3: ", N: 20, f: sqr().Times(sqr()),
			r: ""},

		// Multiply & Co
		{t: " CMul: ", N: 18, f: ps.Ones().CMul(aMinusOne()),
			r: "-1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1 -1/1"},
		// XMul = MonMul(1)
		{t: " XMul: ", N: 20, f: ps.Ones().XMul(),
			r: "0/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1"},
		{t: " Mul : ", N: 20, f: ps.Ones().Times(ps.Ones()),
			r: "1/1 2/1 3/1 4/1 5/1 6/1 7/1 8/1 9/1 10/1 11/1 12/1 13/1 14/1 15/1 16/1 17/1 18/1 19/1 20/1"},
		{t: " 1*  : ", N: 20, f: ps.Ones().Times(),
			r: "1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1"},
		{t: " 1*2 : ", N: 20, f: ps.Ones().Times(ps.Twos()),
			r: "2/1 4/1 6/1 8/1 10/1 12/1 14/1 16/1 18/1 20/1 22/1 24/1 26/1 28/1 30/1 32/1 34/1 36/1 38/1 40/1"},
		{t: " 1*9 : ", N: 14, f: ps.Ones().Times(ps.Ones(), ps.Twos(), ps.Ones(), ps.Twos(), ps.Ones(), ps.Twos()),
			r: "8/1 56/1 224/1 672/1 1680/1 3696/1 7392/1 13728/1 24024/1 40040/1 64064/1 99008/1 148512/1 217056/1"},
		{t: " Subst 2in1: ", N: 14, f: ps.Ones().Subst(ps.Twos()),
			r: "1/1 2/1 6/1 18/1 54/1 162/1 486/1 1458/1 4374/1 13122/1 39366/1 118098/1 354294/1 1062882/1"},
		{t: " MonSubst  : ", N: 20, f: ps.Ones().MonSubst(aMinusOne(), 3),
			r: "1/1 0/1 0/1 -1/1 0/1 0/1 1/1 0/1 0/1 -1/1 0/1 0/1 1/1 0/1 0/1 -1/1 0/1 0/1 1/1 0/1"},
		{t: " Subst c...: ", N: 16, f: ps.Ones().Subst(ps.AdInfinitum(aCoeff())),
			r: "1/1 1/1 2/1 4/1 8/1 16/1 32/1 64/1 128/1 256/1 512/1 1024/1 2048/1 4096/1 8192/1 16384/1"},
		{t: " c*(-1)^4  : ", N: 20, f: ps.AdInfinitum(aCoeff()).MonSubst(aMinusOne(), 4),
			r: "1/1 0/1 0/1 0/1 -1/1 0/1 0/1 0/1 1/1 0/1 0/1 0/1 -1/1 0/1 0/1 0/1 1/1 0/1 0/1 0/1"},

		// Constructors:
		{t: " AdInfinitum(c)  : ", N: 20, f: ps.AdInfinitum(aCoeff()),
			r: "1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1"},
		{t: " Monomial(c, 4)  : ", N: 20, f: ps.Monomial(aCoeff(), 4),
			r: "0/1 0/1 0/1 0/1 1/1"},
		{t: " Binomial(c)     : ", N: 16, f: ps.Binomial(aCoeff()),
			r: "1/1"},
		{t: " Polynom(1,2,3,c): ", N: 16, f: ps.Polynom(aOne(), ps.NewCoefficient(2, 1), ps.NewCoefficient(3, 1), aCoeff()),
			r: "1/1 2/1 3/1 1/1"},
		{t: " Factorials      : ", N: 10, f: ps.Factorials(),
			r: "1/1 2/1 6/1 24/1 120/1 720/1 5040/1 40320/1 362880/1 3628800/1"},
		{t: " Fibonaccis      : ", N: 14, f: ps.Fibonaccis(),
			r: "1/1 2/1 6/1 24/1 120/1 720/1 5040/1 40320/1 362880/1 3628800/1"},

		// Cofficients:
		{t: " Shift twos by c : ", N: 11, f: ps.Twos().Shift(aCoeff()),
			r: "1/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1 2/1"},
		{t: " MonMul(cn) * x^n: ", N: 20, f: poly().MonMul(int(cn)),
			r: "0/1 1/1 1/2 1/3 1/4 1/5"},

		// Recip():
		{t: " 1 / (1+x)       : ", N: 14, f: lin().Recip(),
			r: "1/1 -1/1 1/1 -1/1 1/1 -1/1 1/1 -1/1 1/1 -1/1 1/1 -1/1 1/1 -1/1"},
		{t: " 1 / Poly        : ", N: 9, f: poly().Recip(),
			r: "1/1 -1/2 -1/12 -1/24 -19/720 71/480 -329/8640 -53/3456 -5879/518400"},
		{t: " 1 / Poly #2     : ", N: 2, f: poly().Recip(),
			r: "1/1 -1/2"},

		// Analysis:
		{t: " Deriv: ", N: 18, f: ps.Ones().Deriv(),
			r: "1/1 2/1 3/1 4/1 5/1 6/1 7/1 8/1 9/1 10/1 11/1 12/1 13/1 14/1 15/1 16/1 17/1 18/1"},
		{t: " Integ: ", N: 18, f: ps.Ones().Integ(aZero()),
			r: "0/1 1/1 1/2 1/3 1/4 1/5 1/6 1/7 1/8 1/9 1/10 1/11 1/12 1/13 1/14 1/15 1/16 1/17"},
		{t: " Deriv: ", N: 14, f: sqr().Deriv(),
			r: "1/1 2/1"},
		{t: " Integ: ", N: 14, f: lin().Integ(aZero()),
			r: "0/1 1/1 1/2"},

		// Trigonometry
		{t: " Exp  : ", N: 11, f: ps.Ones().Exp(),
			r: "1/1 1/1 3/2 13/6 73/24 167/40 4051/720 37633/5040 43817/4480 4596553/362880 58941091/3628800"},
		{t: " ATan-: ", N: 18, f: ps.Ones().MonSubst(aMinusOne(), 2).Integ(aZero()),
			r: "0/1 1/1 0/1 -1/3 0/1 1/5 0/1 -1/7 0/1 1/9 0/1 -1/11 0/1 1/13 0/1 -1/15 0/1 1/17"},
		{t: " Tan  : ", N: 14, f: ps.Tan(),
			r: "0/1 1/1 0/1 1/3 0/1 2/15 0/1 17/315 0/1 62/2835 0/1 1382/155925 0/1 21844/6081075"},
		{t: " Cot*x: ", N: 14, f: ps.CotX(),
			r: "1/1 0/1 -1/3 0/1 -1/45 0/1 -2/945 0/1 -1/4725 0/1 -2/93555 0/1 -1382/638512875 0/1"},
		{t: " Sec  : ", N: 14, f: ps.Sec(),
			r: "1/1 0/1 1/2 0/1 5/24 0/1 61/720 0/1 277/8064 0/1 50521/3628800 0/1 540553/95800320 0/1"},
		{t: " Csc*x: ", N: 14, f: ps.CscX(),
			r: "1/1 0/1 1/6 0/1 7/360 0/1 31/15120 0/1 127/604800 0/1 73/3421440 0/1 1414477/653837184000 0/1"},

		// Recip: Trigonometry
		//	{t: " Sinus           : ", N: 30, f: ps.Sin().Times(ps.Sin().Recip()),
		//		r: ""},
		{t: " Cos (-1)^i/(2i)!: ", N: 30, f: ps.Cos().Times(ps.Cos().Recip()),
			r: "1/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1"},
		{t: " Lin : ", N: 30, f: lin().Times(lin().Recip()),
			r: "1/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1"},
		{t: " Quad: ", N: 30, f: sqr().Times(sqr().Recip()),
			r: "1/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1"},
		{t: " Poly: ", N: 30, f: poly().Times(poly().Recip()),
			r: "1/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1"},
		{t: " Exp : ", N: 30, f: ps.Ones().Exp().Times(ps.Ones().Exp().Recip()),
			r: "1/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1"},
		//	{t: " ATan: ", N: 14, f: ps.Ones().MonSubst(aMinusOne(), 2).Integ(aZero()).Times(ps.Ones().MonSubst(aMinusOne(), 2).Integ(aZero()).Recip()),
		//		r: ""},

	}
}

// ===========================================================================
